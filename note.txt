# Introduction ---

[electron] is a [framework] for building [desktop-applications]

[electron] uses [javascript], [html], and [css]

[electron] embeds [node.js] and [chromium] into its [binary]

allows [one-codebase] and [cross-platform] apps

# Quick Start ---

version of [node.js] is unrelated to the [system] version

[entry-point] should be [main.js]

[author] and [description] are required for [packaging]

[start] script [runs] app in [development] mode

[entry-point] of any [electron] app is [main.js]

[main.js] controls the [main-process]

[main.js] runs in [node.js] environment

[main.js] is responsible for [lifecycle], [interface], [privileged-operations], [renderer-process]

[electron] looks for [main] in [package.json] during execution

[window] displays [content] either from [file] or [url]

loading [content] into [window] requires [app] and [BrowserWindow] module

[app] controls [lifecycle]

[BrowserWindow] controls [window]

import as [commonjs] modules

create [window] after app's [ready-event]

use process's [platform] to make [window] behave more [natively]

[steps:] how to implement [window-all-closed]

[steps:] how to implement [activate]

[document] is a different [process]

attach [preload] script to run before [renderer] is loaded

access to both [renderer] globals ( [window] and [document] )

as well as [node.js] environment ( [process] )

[steps:] configure [webPreferences.preload] option

fastest way to [distribute] is using [electron-forge]

add [electron-forge] as a development [dependency]

use [import] command to [scaffold]

[steps:] setup [electron-forge]

# Advanced Installation Instructions ---

running [electron] [ad-hoc]

change [architecture] using [--arc] flag

specify the [platform] using [--platform] flag

[steps:] when using [HTTP proxy]

[steps:] download [binaries] using [mirrors] and [caches]

[steps:] skip binary [download] when using [ci]

[steps:] [troubleshoot] network [problems]

# Prerequisites

how to [create] and [distribute]

use [create-electron-app] command for [boilerplate]

[electron] is a [wrapper] for [web] apps

[electron] runs in [node.js] environment

[steps]: required [tools]

# Building your First app

do not use windows [subsystem] for linux

install [electron] as [devDependencies]

[app] will come [bundled] with electron [binary]

refer [github] for [gitignore] template

[electron .] runs [main] script in [dev] mode

[PascalCase] modules are [instantiable]

[camelCase] modules are not [instantiable]

ESM [import] is not [supported]

prefer [app.whenReady()] over [app.on('ready')]

each [web-page] will run in a separate [process] called [renderer]

[renderer] have access to javascript [APIs]

3 possible platforms: [win32], [linux] and [darwin]

[steps:] setup [debugging] in [vscode]

# Using Preload Scripts ---

what is [preload] script

how to securely expose [privileged-apis]

how to [communicate] between [main] and [renderer] with [ipc] modules

[main] process has full [system-access]

includes electron [modules], node [built-ins], and npm [packages]

[renderer] run web pages and do not run [node.js]

[bridge] difference using [preload] script

[preload] script has access to html [dom]

and limited subset of [node.js] and electron [apis]

[preload] script is [sand-boxed] since [v20]

[refer:] table for available [apis] in [preload]

[preload] script is [injected] before a web page loads in the [renderer]

similar to [chrome] extensions's [content-scripts]

to add privileged [access], define [global] objects through the [contextBridge] apis

# Adding Features ---

adding [complexity] to app [code]

deeper [integration] with [os] and [node.js]

# Packaging Your Application ---

for [distributions], see forge's [makers] documentation

for [icons], see forge's [icon] tutorial

for [code-singing] see forge's [code-signing] documentation

#  Publishing and Updating ---

[refer:] this [documentation]
